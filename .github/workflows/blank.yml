# This is a basic workflow to help you get started with Actions

name: Publish API Specification to Exchange

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  workflow_dispatch:

env:
  TOKEN: a99f4095-fa13-4cec-bdca-322804938905
  ORGANIZATION_ID: f60b1434-1059-4f0f-a28c-ccf4a9be05b2
  OWNER_ID: 612cf2dd-9f92-4a08-97ed-f6be4faf06ca
  CLASSIFIER: raml
  SUBTYPE: 
  BRANCH: master
  REQUEST_ORIGIN: "GitHub Pipeline"
  SPEC: publish-api-spec-pipeline.raml

  PROJECT_NAME: ${{github.event.repository.name}}

  CURL_BASE_URL: https://eu1.anypoint.mulesoft.com
  CURL_HEADERS: "-H 'Authorization: Bearer $TOKEN' -H 'x-organization-id: $ORGANIZATION_ID' -H 'x-owner-id: $OWNER_ID' -H 'Accept: application/json' -H 'x-origin: REQUEST_ORIGIN' -H 'Content-Type: application/json'"
  CURL_OPTIONS: --compressed $CURL_HEADERS

jobs:
  import_to_design_center:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Fetch all projects
        run: |
          curl -s --url https://eu1.anypoint.mulesoft.com/designcenter/api-designer/projects --compressed -H 'Authorization: Bearer ${{env.TOKEN}}' -H 'x-organization-id: ${{env.ORGANIZATION_ID}}' -H 'x-owner-id: ${{env.OWNER_ID}}' -H 'Accept: application/json' -H 'x-origin: ${{env.REQUEST_ORIGIN}}' -H 'Content-Type: application/json' -o projects.json

      - name: Check if the project is already created
        run: echo "PROJECT_ID=$(cat projects.json | jq '.[] | select(.name == "${{github.event.repository.name}}")' | jq -r .id)" >> $GITHUB_ENV
          
      - name: Create the project
        shell: bash
        run: |
          if [ "$MULTI_LINE_ARG" == "" ]; then
            echo "PROJECT_ID=$(curl -s --url https://eu1.anypoint.mulesoft.com/designcenter/api-designer/projects --compressed -H 'Authorization: Bearer ${{env.TOKEN}}' -H 'x-organization-id: ${{env.ORGANIZATION_ID}}' -H 'x-owner-id: ${{env.OWNER_ID}}' -H 'Accept: application/json' -H 'x-origin: ${{env.REQUEST_ORIGIN}}' -H 'Content-Type: application/json' --data-binary '{ "name": "${{github.event.repository.name}}", "classifier": "${{env.CLASSIFIER}}", "subType": "${{env.SUBTYPE}}" }' | jq -r .id)" >> $GITHUB_ENV
          fi
        env:
          PROJECT_ID: ${{ env.PROJECT_ID}}

      - name: Acquire a lock
        run: |
          curl -s -X POST --url https://eu1.anypoint.mulesoft.com/designcenter/api-designer/projects/${{env.PROJECT_ID}}/branches/${{env.BRANCH}}/acquireLock --compressed -H 'Authorization: Bearer ${{env.TOKEN}}' -H 'x-organization-id: ${{env.ORGANIZATION_ID}}' -H 'x-owner-id: ${{env.OWNER_ID}}' -H 'Accept: application/json' -H 'x-origin: ${{env.REQUEST_ORIGIN}}' -H 'Content-Type: application/json' --data-binary '{}'
      
      - name: Get specifications file
        id: getSpecificationContent
        run: echo "::set-output name=SPEC_CONTENT::$(cat  ${{ github.workspace }}/${{env.SPEC}}))"
      
      - name: Add the main specification file
        run: |
          curl -s -X POST --url https://eu1.anypoint.mulesoft.com/designcenter/api-designer/projects/${{env.PROJECT_ID}}/branches/${{env.branch}}/save?commit=true&message=CommitedByPipeline --compressed -H 'Authorization: Bearer ${{env.TOKEN}}' -H 'x-organization-id: ${{env.ORGANIZATION_ID}}' -H 'x-owner-id: ${{env.OWNER_ID}}' -H 'Accept: application/json' -H 'x-origin: ${{env.REQUEST_ORIGIN}}' -H 'Content-Type: application/json' --data-binary '[{"path": "${{env.SPEC}}", "type": "FILE", "content": "${{steps.getSpecificationContent.outputs.SPEC_CONTENT}}"}, {"path": "exchange.json", "type": "FILE", "content": "{\"dependencies\":[],\"main\":\"${{env.SPEC}}\"}"}]'

      - name: Release the lock
        run: |
          curl -s -X POST --url https://eu1.anypoint.mulesoft.com/designcenter/api-designer/projects/${{env.PROJECT_ID}}/branches/${{env.BRANCH}}/releaseLock --compressed -H 'Authorization: Bearer ${{env.TOKEN}}' -H 'x-organization-id: ${{env.ORGANIZATION_ID}}' -H 'x-owner-id: ${{env.OWNER_ID}}' -H 'Accept: application/json' -H 'x-origin: ${{env.REQUEST_ORIGIN}}' -H 'Content-Type: application/json' --data-binary '{}'

  publish_to_exchange:
    runs-on: ubuntu-latest
    needs: import_to_design_center
    
    steps:
      - uses: actions/checkout@v2

      - name: Fetch all projects
        run: |
          curl -s --url ${{env.CURL_BASE_URL}}/designcenter/api-designer/projects ${{env.CURL_OPTIONS}} -o projects.json

      - name: Check if the project is already created
        run: echo "PROJECT_ID=$(cat projects.json | jq '.[] | select(.name == "${{github.event.repository.name}}")' | jq -r .id)" >> $GITHUB_ENV

      - name: Acquire a lock
        run: |
          curl -s -X POST --url ${{env.CURL_BASE_URL}}/designcenter/api-designer/projects/${{env.PROJECT_ID}}/branches/${{env.BRANCH}}/acquireLock ${{env.CURL_OPTIONS}} --data-binary '{}'
 
      - name: Publish API to Exchange
        run: |
          curl -s -X POST --url ${{env.CURL_BASE_URL}}/designcenter/api-designer//projects/${{env.PROJECT_ID}}/branches/${{env.BRANCH}}/publish/exchange ${{env.CURL_OPTIONS}} --data-binary '{ "name": "${{env.PROJECT_NAME}}", "apiVersion": "${{env.API_VERSION}}", "version": "${{env.VERSION}}", "main": "${{env.API_VERSION}}.raml", "classifier": "${{env.CLASSIFIER}}", "assetId": ${{env.PROJECT_NAME}}, "groupId": "${{env.ORGANIZATION_ID}}" }'

      - name: Release the lock
        run: |
          curl -s -X POST --url ${{env.CURL_BASE_URL}}/designcenter/api-designer/projects/${{env.PROJECT_ID}}/branches/${{env.BRANCH}}/releaseLock ${{env.CURL_OPTIONS}} --data-binary '{}'
